// AUTOGENERATED FILE: easyjson marshaler/unmarshalers.

package fenech

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson7e92cd2fDecodeBitbucketOrgTdmvFenech(in *jlexer.Lexer, out *binlog) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Type":
			out.Type = uint(in.Uint())
		case "Key":
			out.Key = string(in.String())
		case "Value":
			if in.IsNull() {
				in.Skip()
				out.Value = nil
			} else {
				out.Value = in.Bytes()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7e92cd2fEncodeBitbucketOrgTdmvFenech(out *jwriter.Writer, in binlog) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Type\":")
	out.Uint(uint(in.Type))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Key\":")
	out.String(string(in.Key))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Value\":")
	out.Base64Bytes(in.Value)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v binlog) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson7e92cd2fEncodeBitbucketOrgTdmvFenech(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v binlog) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson7e92cd2fEncodeBitbucketOrgTdmvFenech(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *binlog) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson7e92cd2fDecodeBitbucketOrgTdmvFenech(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *binlog) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson7e92cd2fDecodeBitbucketOrgTdmvFenech(l, v)
}
